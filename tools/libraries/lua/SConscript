from building import *

CWD = GetCurrentDir()

objs = Glob("aslua_can.cpp") + Glob("aslua.cpp")
objsAsn1x509 = Glob("aslua_x509.cpp")
objsCrypto = Glob("aslua_crypto.cpp")


def GetLuaPackage():
    cmd = 'sed -i "612c extern void luaL_openAsBuiltlibs(lua_State *L);" lua.c'
    cmd += ' && sed -i "634c luaL_openlibs(L); luaL_openAsBuiltlibs(L);" lua.c'
    pkg = Package("https://github.com/lua/lua.git", version="v5.4.6", cmd=cmd)
    return pkg


@register_library
class LibraryLUA(Library):
    def config(self):
        pkg = GetLuaPackage()
        self.include = ["%s/include" % (CWD), pkg]
        self.CPPPATH = ["$INFRAS"]
        self.LIBS = ["Utils", "CanLib"]
        luaObjs = PkgGlob(pkg, ["*.c"])
        SrcRemove(luaObjs, ["lua.c", "onelua.c"])
        self.source = objs + luaObjs
        if IsBuildForMSVC():
            pass
        else:
            if os.getenv("LUA_WITH_ASN1X509", "NO") == "YES":
                self.LIBS += ["ASN1X509"]
                self.CPPDEFINES = ["USE_ASN1X509"]
                self.source += objsAsn1x509
            if os.getenv("LUA_WITH_CRYPTO", "NO") == "YES":
                self.LIBS += ["CryptoIf"]
                self.CPPDEFINES = ["USE_CRYPTOIF"]
                self.source += objsCrypto


@register_application
class ApplicationLua(Application):
    def config(self):
        pkg = GetLuaPackage()
        self.include = ["%s/include" % (CWD)]
        self.CPPPATH = [pkg, "$INFRAS"]
        self.LIBS += ["LUA"]
        luaMain = PkgGlob(pkg, ["lua.c"])
        self.source = luaMain
        self.Install("../one")
